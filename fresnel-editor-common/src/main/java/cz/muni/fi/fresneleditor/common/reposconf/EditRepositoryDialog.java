/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditRepositoryDialog.java
 *
 * Created on 22.4.2010, 0:57:31
 */

package cz.muni.fi.fresneleditor.common.reposconf;

import java.io.StringReader;
import java.io.StringWriter;

import org.openrdf.repository.RepositoryException;
import org.openrdf.rio.RDFFormat;
import org.openrdf.rio.RDFHandler;
import org.openrdf.rio.n3.N3Writer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cz.muni.fi.fresneleditor.common.AppEventsManager;
import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.guisupport.MessageDialog;
import cz.muni.fi.fresneleditor.common.utils.GuiUtils;
import cz.muni.fi.fresneleditor.model.BaseRepositoryDao;
import cz.muni.fi.fresneleditor.model.DataImportException;

/**
 * 
 * @author nodrock
 */
public class EditRepositoryDialog extends javax.swing.JDialog {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private final static Logger LOG = LoggerFactory
			.getLogger(EditRepositoryDialog.class);

	private final BaseRepositoryDao repositoryDao;

	/** Creates new form EditRepositoryDialog */
	public EditRepositoryDialog(java.awt.Frame parent, boolean modal,
			BaseRepositoryDao repository) {
		super(parent, modal);
		initComponents();

		repositoryDao = repository;

		GuiUtils.centerOnScreen(this);

		setTitle(repositoryDao.getName());

		StringWriter writer = new StringWriter();
		RDFHandler rdfHandler = new N3Writer(writer);
		repositoryDao.printStatements(rdfHandler, false);

		textArea.setText(writer.toString());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		textArea = new javax.swing.JTextArea();
		closeButton = new javax.swing.JButton();
		saveButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		jScrollPane1.setName("jScrollPane1"); // NOI18N

		textArea.setColumns(20);
		textArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
		textArea.setRows(5);
		textArea.setName("textArea"); // NOI18N
		jScrollPane1.setViewportView(textArea);

		closeButton.setText("Close");
		closeButton.setName("closeButton"); // NOI18N
		closeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeButtonActionPerformed(evt);
			}
		});

		saveButton.setText("Save");
		saveButton.setName("saveButton"); // NOI18N
		saveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				saveButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addGap(405, 405, 405)
								.addComponent(saveButton)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(closeButton,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										78,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(10, 10, 10))
				.addComponent(jScrollPane1,
						javax.swing.GroupLayout.DEFAULT_SIZE, 793,
						Short.MAX_VALUE));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { closeButton, saveButton });

		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										420, Short.MAX_VALUE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(closeButton)
												.addComponent(saveButton))
								.addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeButtonActionPerformed
		setVisible(false);
		dispose();
	}// GEN-LAST:event_closeButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
		try {
			repositoryDao.clearAllData();
		} catch (RepositoryException e) {
			LOG.warn(e.getMessage());
		}

		StringReader reader = new StringReader(textArea.getText());
		long amount;
		try {
			amount = repositoryDao.addData(reader, RDFFormat.N3, null);
			new MessageDialog(
					this,
					"Import finished",
					"Number of imported statements: "
							+ amount
							+ ".<br><br>Please note that it is necessary to restart the application"
							+ " for the data being available to GUI.")
					.setVisible(true);
			repositoryDataChanged();
		} catch (DataImportException ex) {
			LOG.warn(ex.getMessage());
			LOG.debug(ex.getMessage(), ex);
			new MessageDialog(this, "Error during import", ex.getMessage()
					+ "<br><br>The import was canceled.").setVisible(true);

		}
		setVisible(false);
		dispose();
	}// GEN-LAST:event_saveButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton closeButton;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton saveButton;
	private javax.swing.JTextArea textArea;

	// End of variables declaration//GEN-END:variables

	/**
	 * Fires the events appropriate for repository data change.
	 */
	private void repositoryDataChanged() {
		if (ContextHolder.getInstance().isActiveRepository(
				repositoryDao.getName())) {
			// fire the event only if we modified the currently opened
			// repository
			AppEventsManager.getInstance().fireOpenProjectChanged(this);
		}
	}
}
