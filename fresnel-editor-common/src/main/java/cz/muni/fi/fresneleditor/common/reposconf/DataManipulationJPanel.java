/*
 * Fresnel Editor
 */

package cz.muni.fi.fresneleditor.common.reposconf;

import java.awt.Container;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.swing.JFileChooser;

import org.openrdf.rio.RDFFormat;
import org.openrdf.rio.RDFHandler;
import org.openrdf.rio.n3.N3Writer;
import org.openrdf.rio.ntriples.NTriplesWriter;
import org.openrdf.rio.rdfxml.RDFXMLWriter;
import org.openrdf.rio.turtle.TurtleWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;

import cz.muni.fi.fresneleditor.common.AppEventsManager;
import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.guisupport.MessageDialog;
import cz.muni.fi.fresneleditor.model.BaseRepositoryDao;
import cz.muni.fi.fresneleditor.model.DataImportException;
import java.util.ResourceBundle;

/**
 * 
 * @author Igor Zemsky (zemsky@mail.muni.cz)
 */
public class DataManipulationJPanel extends javax.swing.JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger LOG = LoggerFactory
			.getLogger(DataManipulationJPanel.class);
	private static final ResourceBundle bundle = ResourceBundle
			.getBundle("cz/muni/fi/fresneleditor/common/resource-bundle-common");

	public static enum DataManipulationType {
		IMPORT, EXPORT, DELETE
	}

	private DataManipulationType dataManipulationType;
	private final BaseRepositoryDao repositoryDao;

	/**
	 * Creates new form DataManipulationJPanel
	 */
	public DataManipulationJPanel() {
		initComponents();
		// dummy constructor for netbeans
		repositoryDao = null;
		dataManipulationType = null;
	}

	public DataManipulationJPanel(BaseRepositoryDao repositoryDao,
			DataManipulationType type) {

		Assert.notNull(repositoryDao);
		this.repositoryDao = repositoryDao;
		this.dataManipulationType = type;

		initComponents();

		switch (dataManipulationType) {
		case DELETE:
			actionButton.setText(bundle.getString("Delete"));
			break;
		case EXPORT:
			actionButton.setText(bundle.getString("Export"));
			break;
		case IMPORT:
			actionButton.setText(bundle.getString("Import"));
			break;
		default:
			throw new ArrayIndexOutOfBoundsException();
		}
	}

	public void setManipulationType(DataManipulationType type) {
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		actionButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		rdfDataFormatJPanel = new cz.muni.fi.fresneleditor.common.reposconf.RdfDataFormatJPanel();
		dataFileJPanel = new javax.swing.JPanel();
		selectFileLbl = new javax.swing.JLabel();
		browseFileBtn = new javax.swing.JButton();
		dataFileText = new javax.swing.JTextField();

		setName("Form"); // NOI18N

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance(
						cz.muni.fi.fresneleditor.common.FresnelApplication.class)
				.getContext().getResourceMap(DataManipulationJPanel.class);
		actionButton.setFont(resourceMap.getFont("actionButton.font")); // NOI18N
		actionButton.setText(resourceMap.getString("actionButton.text")); // NOI18N
		actionButton.setEnabled(false);
		actionButton.setName("actionButton"); // NOI18N
		actionButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				actionButtonActionPerformed(evt);
			}
		});

		cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
		cancelButton.setName("cancelButton"); // NOI18N
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		rdfDataFormatJPanel.setName("rdfDataFormatJPanel"); // NOI18N

		dataFileJPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(resourceMap
						.getString("dataFileJPanel.border.title"))); // NOI18N
		dataFileJPanel.setName("dataFileJPanel"); // NOI18N

		selectFileLbl.setText(resourceMap.getString("selectFileLbl.text")); // NOI18N
		selectFileLbl.setName("selectFileLbl"); // NOI18N

		browseFileBtn.setText(resourceMap.getString("browseFileBtn.text")); // NOI18N
		browseFileBtn.setName("browseFileBtn"); // NOI18N
		browseFileBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				browseFileBtnActionPerformed(evt);
			}
		});

		dataFileText.setText(resourceMap.getString("dataFileText.text")); // NOI18N
		dataFileText.setName("dataFileText"); // NOI18N

		javax.swing.GroupLayout dataFileJPanelLayout = new javax.swing.GroupLayout(
				dataFileJPanel);
		dataFileJPanel.setLayout(dataFileJPanelLayout);
		dataFileJPanelLayout
				.setHorizontalGroup(dataFileJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								dataFileJPanelLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												dataFileJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																selectFileLbl)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																dataFileJPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				dataFileText,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				413,
																				Short.MAX_VALUE)
																		.addGap(18,
																				18,
																				18)
																		.addComponent(
																				browseFileBtn)))
										.addContainerGap()));
		dataFileJPanelLayout
				.setVerticalGroup(dataFileJPanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								dataFileJPanelLayout
										.createSequentialGroup()
										.addComponent(selectFileLbl)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(
												dataFileJPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																browseFileBtn)
														.addComponent(
																dataFileText,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														dataFileJPanel,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														rdfDataFormatJPanel,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														546, Short.MAX_VALUE)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		cancelButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		88,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		actionButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		84,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(dataFileJPanel,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(rdfDataFormatJPanel,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(actionButton)
												.addComponent(cancelButton))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void browseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_browseFileBtnActionPerformed
		selectFile();
	}// GEN-LAST:event_browseFileBtnActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		Container parent = getParent();
		while (!(parent instanceof DataManipulationJDialog)) {
			parent = parent.getParent();
		}
		parent.setVisible(false);
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_actionButtonActionPerformed
		switch (dataManipulationType) {
		case DELETE:
			deleteData();
			break;
		case EXPORT:
			exportData();
			break;
		case IMPORT:
			importData();
			break;
		default:
			throw new ArrayIndexOutOfBoundsException();
		}
	}// GEN-LAST:event_actionButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton actionButton;
	private javax.swing.JButton browseFileBtn;
	private javax.swing.JButton cancelButton;
	private javax.swing.JPanel dataFileJPanel;
	private javax.swing.JTextField dataFileText;
	private cz.muni.fi.fresneleditor.common.reposconf.RdfDataFormatJPanel rdfDataFormatJPanel;
	private javax.swing.JLabel selectFileLbl;
	// End of variables declaration//GEN-END:variables
	private JFileChooser fc;
	private File file;

	private void selectFile() {
		if (fc == null) {
			fc = new JFileChooser();
		}

		int returnVal = fc.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			file = fc.getSelectedFile();
			dataFileText.setText(file.getAbsolutePath());
			actionButton.setEnabled(true);
		} else {
			actionButton.setEnabled(false);
			return;
		}
	}

	private void importData() {
		RDFFormat rdfFormat = rdfDataFormatJPanel.getSelectedFormat();

		long amount;
		try {
			amount = repositoryDao.addData(file, rdfFormat, "");
			LOG.info("Repository dao: {} [{} statements imported]",
					repositoryDao.getName(), amount);
			// fixme igor: implement immport functionality that does not require
			// restart of the GUI
			new MessageDialog(
					this,
					bundle.getString("Import_finished"),
					bundle.getString("Number_of_imported_statements:_")
							+ amount
							+ bundle.getString(".<br><br>Please_note_that_it_is_necessary_to_restart_the_application_")
							+ bundle.getString("_for_the_data_being_available_to_GUI."))
					.setVisible(true);
			repositoryDataChanged();
		} catch (DataImportException e) {
			LOG.warn(e.getMessage());
			LOG.debug(e.getMessage(), e);
			new MessageDialog(
					this,
					bundle.getString("Error_during_import"),
					e.getMessage()
							+ bundle.getString("<br><br>The_import_was_canceled."))
					.setVisible(true);
		}
	}

	private void exportData() {
		RDFFormat rdfFormat = rdfDataFormatJPanel.getSelectedFormat();

		RDFHandler rdfHandler = null;
		FileOutputStream fileOutputStream = null;
		try {
			LOG.info(
					"Starting the export of statements from repository '{}' to file '{}'",
					repositoryDao.getName(), file.getAbsolutePath());
			fileOutputStream = new FileOutputStream(file);

			if (rdfFormat.equals(RDFFormat.N3)) {
				rdfHandler = new N3Writer(fileOutputStream);
			} else if (rdfFormat.equals(RDFFormat.NTRIPLES)) {
				rdfHandler = new NTriplesWriter(fileOutputStream);
			} else if (rdfFormat.equals(RDFFormat.RDFXML)) {
				rdfHandler = new RDFXMLWriter(fileOutputStream);
			} else if (rdfFormat.equals(RDFFormat.TURTLE)) {
				rdfHandler = new TurtleWriter(fileOutputStream);
			} else {
				throw new ArrayIndexOutOfBoundsException("Unsupported format: "
						+ rdfFormat);
			}
			repositoryDao.printStatements(rdfHandler, false);
			LOG.info("Finished: Export from repository '{}' to file '{}'",
					repositoryDao.getName(), file.getAbsolutePath());
			new MessageDialog(
					this,
					java.util.ResourceBundle
							.getBundle(
									"cz/muni/fi/fresneleditor/common/resource-bundle-common")
							.getString("Export_finished"),
					java.util.ResourceBundle
							.getBundle(
									"cz/muni/fi/fresneleditor/common/resource-bundle-common")
							.getString(
									"The_data_was_successfully_exported_to_'")
							+ file.getPath()
							+ "'<br>"
							+ java.util.ResourceBundle
									.getBundle(
											"cz/muni/fi/fresneleditor/common/resource-bundle-common")
									.getString(
											"Number_of_exported_statements:_")
							+ repositoryDao.size()).setVisible(true);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (fileOutputStream != null) {
				try {
					fileOutputStream.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

	}

	private void deleteData() {
		// TODO Auto-generated method stub
		new MessageDialog(this, java.util.ResourceBundle.getBundle(
				"cz/muni/fi/fresneleditor/common/resource-bundle-common")
				.getString("not_implemented_yet"), "").setVisible(true);
		// repositoryDao.refreshRepository();
		// repositoryDataChanged();
	}

	/**
	 * Fires the events appropriate for repository data change.
	 */
	private void repositoryDataChanged() {
		if (ContextHolder.getInstance().isActiveRepository(
				repositoryDao.getName())) {
			// fire the event only if we modified the currently opened
			// repository
			AppEventsManager.getInstance().fireOpenProjectChanged(this);
		}
	}

}
