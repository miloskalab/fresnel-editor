/*
 * Fresnel Editor
 */

package cz.muni.fi.fresneleditor.common.reposconf;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.DefaultComboBoxModel;

import cz.muni.fi.fresneleditor.common.AppEventsManager;
import cz.muni.fi.fresneleditor.common.ContextHolder;
import cz.muni.fi.fresneleditor.common.config.ApplicationConfiguration;
import cz.muni.fi.fresneleditor.common.config.RepositoryConfiguration;
import cz.muni.fi.fresneleditor.common.events.IRepositoriesChangedListener;
import cz.muni.fi.fresneleditor.common.events.RepositoriesChangedEvent;
import cz.muni.fi.fresneleditor.common.guisupport.MessageDialog;
import cz.muni.fi.fresneleditor.common.utils.GuiUtils;
import cz.muni.fi.fresneleditor.model.BaseRepositoryDao;
import cz.muni.fi.fresneleditor.model.IRepositoryConfiguration;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import java.awt.Component;

/**
 * 
 * @author Igor Zemsky (zemsky@mail.muni.cz)
 */
public class RepositoriesConfigurationJPanel extends javax.swing.JPanel
		implements IRepositoriesChangedListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Dummy constructor for NetBeans - don't use this crap.
	 */
	@Deprecated
	public RepositoriesConfigurationJPanel() {
		initComponents();
	}

	/**
	 * Creates new form RepositoriesConfigurationJPanel
	 * 
	 * @param notNetBeansConstructor
	 *            this parameter has not logical meaning, it just allows us to
	 *            "overload" default dummy NetBeans constructor
	 */
	public RepositoriesConfigurationJPanel(boolean notNetBeansConstructor) {

		initComponents();

		updateRepositoriesCombo();

		// set the enable/disable state of controls correctly
		repositorySettingsJPanel.setEnabledIncludingChildren(false);

		updatePanelBasedOnSelection();

		AppEventsManager.getInstance().addFresnelAppEventListener(
				IRepositoriesChangedListener.class, this);
	}

	// TODO maybe add functionality for changing the name of an existing
	// repository
	// could be implemented like a button next to 'Create new' and 'Delete...'
	// buttons
	// with a popup dialog for specifying a new name

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {

		repositoriesCombo = new javax.swing.JComboBox();
		repositoryDataManagerJPanel = new cz.muni.fi.fresneleditor.common.reposconf.RepositoryDataManagerJPanel(
				this);
		deleteBtn = new javax.swing.JButton();
		createNewBtn = new javax.swing.JButton();
		repositorySettingsJPanel = new cz.muni.fi.fresneleditor.common.reposconf.RepositorySettingsJPanel();
		availableRepositoriesLbl = new javax.swing.JLabel();

		setName("Form"); // NOI18N

		repositoriesCombo.setName("repositoriesCombo"); // NOI18N
		repositoriesCombo
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						repositoriesComboActionPerformed(evt);
					}
				});

		repositoryDataManagerJPanel.setName("repositoryDataManagerJPanel"); // NOI18N

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance(
						cz.muni.fi.fresneleditor.common.FresnelApplication.class)
				.getContext()
				.getResourceMap(RepositoriesConfigurationJPanel.class);
		deleteBtn.setFont(resourceMap.getFont("deleteBtn.font")); // NOI18N
		deleteBtn.setText(resourceMap.getString("deleteBtn.text")); // NOI18N
		deleteBtn.setEnabled(false);
		deleteBtn.setName("deleteBtn"); // NOI18N
		deleteBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteBtnActionPerformed(evt);
			}
		});

		createNewBtn.setFont(resourceMap.getFont("createNewBtn.font")); // NOI18N
		createNewBtn.setText(resourceMap.getString("createNewBtn.text")); // NOI18N
		createNewBtn.setName("createNewBtn"); // NOI18N
		createNewBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				createNewBtnActionPerformed(evt);
			}
		});

		repositorySettingsJPanel.setName("repositorySettingsJPanel"); // NOI18N

		availableRepositoriesLbl.setText(resourceMap
				.getString("availableRepositoriesLbl.text")); // NOI18N

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(repositorySettingsJPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGroup(layout.createSequentialGroup()
							.addComponent(availableRepositoriesLbl)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(repositoriesCombo, GroupLayout.PREFERRED_SIZE, 321, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(createNewBtn)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(deleteBtn))
						.addComponent(repositoryDataManagerJPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(createNewBtn)
						.addComponent(deleteBtn)
						.addComponent(availableRepositoriesLbl)
						.addComponent(repositoriesCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(repositorySettingsJPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(repositoryDataManagerJPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(173, Short.MAX_VALUE))
		);
		layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {deleteBtn, createNewBtn});
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents

	private void createNewBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_createNewBtnActionPerformed
		new CreateNewRepositoryDialog(GuiUtils.getOwnerFrame(this), true)
				.setVisible(true);
	}// GEN-LAST:event_createNewBtnActionPerformed

	private void repositoriesComboActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_repositoriesComboActionPerformed
		updatePanelBasedOnSelection();
	}// GEN-LAST:event_repositoriesComboActionPerformed

	private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteBtnActionPerformed
		deleteRepositoryConfiguration();
	}// GEN-LAST:event_deleteBtnActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel availableRepositoriesLbl;
	private javax.swing.JButton createNewBtn;
	private javax.swing.JButton deleteBtn;
	private javax.swing.JComboBox repositoriesCombo;
	private cz.muni.fi.fresneleditor.common.reposconf.RepositoryDataManagerJPanel repositoryDataManagerJPanel;
	private cz.muni.fi.fresneleditor.common.reposconf.RepositorySettingsJPanel repositorySettingsJPanel;

	// End of variables declaration//GEN-END:variables

	/**
	 * Loads the list of available repositories configurations from context
	 * holder and sets this as a model to {@link #repositoriesCombo}.
	 */
	private void updateRepositoriesCombo() {

		ApplicationConfiguration appConf = ContextHolder.getInstance()
				.getApplicationConfiguration();

		List<String> v = new ArrayList<String>();
		for (String repositoryName : appConf.getRepositoryConfigurations()
				.keySet()) {
			RepositoryConfiguration repositoryConfiguration = appConf
					.getRepositoryConfigurations().get(repositoryName);
			if (repositoryConfiguration.getLocation() != null
					&& !"".equals(repositoryConfiguration.getLocation())) {
				v.add(repositoryName);
			}
		}

		Collections.sort(v);
		repositoriesCombo.setModel(new DefaultComboBoxModel(v.toArray()));
		if (!v.isEmpty()) {
			repositoriesCombo.setSelectedIndex(0);
		}
	}

	private void deleteRepositoryConfiguration() {

		final String repoName = (String) repositoriesCombo.getSelectedItem();

		// ContextHolder holder = ContextHolder.getInstance();
		/*
		 * if (holder.isActiveRepository(repoName)) { // cannot delete currently
		 * opened repository new MessageDialog(this, "Cannot delete " +
		 * repoName,
		 * "The repository cannot be deleted because it is currently active in opened project. "
		 * +
		 * "Try to delete the repository after the project is closed.").setVisible
		 * (true); return; }
		 */

		// List<String> projectsUsingRepository =
		// holder.getProjectsUsingRepository(repoName);
		// FIXME
		List<String> projectsUsingRepository = new ArrayList<String>();

		// FIXME
		if (!projectsUsingRepository.isEmpty()) {
			// cannot delete repository which is used by a project
			String message = "The repository cannot be deleted because it is referenced by projects.";
			message += "<br><br>Projects using the repository:";
			for (String projectName : projectsUsingRepository) {
				message += "<br>" + projectName;
			}
			new MessageDialog(this, "Cannot delete " + repoName, message)
					.setVisible(true);
			return;
		}

		// OK to delete
		new MessageDialog(this, "Confirmation",
				"Do you really want to delete the repository '" + repoName
						+ "'?", new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						ContextHolder.getInstance()
								.getApplicationConfiguration()
								.removeRepositoryConfiguration(repoName);
						AppEventsManager.getInstance()
								.fireRepositoriesChanagedEvent(
										RepositoriesConfigurationJPanel.this);
					}
				}).setVisible(true);
	}

	public BaseRepositoryDao getSelectedRepository() {
		return ContextHolder.getInstance().getRepositoryDao(
				(String) repositoriesCombo.getSelectedItem());
	}

	private void updatePanelBasedOnSelection() {

		ApplicationConfiguration appConf = ContextHolder.getInstance()
				.getApplicationConfiguration();
		IRepositoryConfiguration conf = appConf.getRepositoryConfigurations()
				.get(repositoriesCombo.getSelectedItem());

		// update repoSettingsSubpanel properties
		repositorySettingsJPanel.update(conf);

		// namespaces panel
		BaseRepositoryDao selectedRepository = getSelectedRepository();
		ArrayList<BaseRepositoryDao> selectedRepoList = new ArrayList<BaseRepositoryDao>();
		if (selectedRepository != null) {
			selectedRepoList.add(selectedRepository);
		}
		// FIXME namespacesConfigurationJPanel1.update(selectedRepoList);

		// enable/disable components
		boolean isRepoSelected = conf != null;

		// panels
		// FIXME
		// namespacesConfigurationJPanel1.setEnabledIncludingChildren(isRepoSelected);
		repositoryDataManagerJPanel.setEnabledIncludingChildren(isRepoSelected);

		// buttons
		deleteBtn.setEnabled(isRepoSelected);

		// FIXME: remove
		if (selectedRepository != null) {
			selectedRepository.printStatements(System.out, false);
		}
	}

	@Override
	public void repositoriesChanged(RepositoriesChangedEvent evt) {
		Object selectedItem = repositoriesCombo.getSelectedItem();
		updateRepositoriesCombo();
		if (selectedItem != null) {
			repositoriesCombo.setSelectedItem(selectedItem);
		}
	}

}