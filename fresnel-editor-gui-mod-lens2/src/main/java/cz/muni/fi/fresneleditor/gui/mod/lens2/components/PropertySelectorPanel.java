/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PropertySelectorPanel.java
 *
 * Created on 25.5.2010, 11:20:55
 */

package cz.muni.fi.fresneleditor.gui.mod.lens2.components;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.List;

import javax.swing.DefaultListModel;

import com.google.common.collect.Lists;
import com.jidesoft.swing.CheckBoxListSelectionModel;

import cz.muni.fi.fresneleditor.gui.mod.lens2.PropertyVisibilityWrapper;

/**
 * 
 * @author namornik
 */
public class PropertySelectorPanel extends javax.swing.JPanel {
	private boolean currentShowMode;

	private static final Color greenColor = new Color(213, 255, 213);
	private static final Color redColor = new Color(255, 213, 213);
	private CheckBoxListSelectionModel showPropsModel, hidePropsModel;

	/** Creates new form PropertySelectorPanel */
	public PropertySelectorPanel() {
		initComponents();

		showPropsModel = new CheckBoxListSelectionModel();
		hidePropsModel = new CheckBoxListSelectionModel();
		currentShowMode = true;

		propertySelector.setCheckBoxListSelectionModel(showPropsModel);

		allPropertiesBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				setShowingMode(!allPropertiesBox.isSelected());
			}
		});

		buttonGroup1.setSelected(showProperties.getModel(), currentShowMode);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		allPropertiesBox = new javax.swing.JCheckBox();
		hideProperties = new javax.swing.JToggleButton();
		showProperties = new javax.swing.JToggleButton();
		propsSeparator = new javax.swing.JSeparator();
		jScrollPane1 = new javax.swing.JScrollPane();
		propertySelector = new cz.muni.fi.fresneleditor.gui.mod.lens2.components.PropertySelector<PropertyVisibilityWrapper>();

		setBackground(greenColor);
		setBorder(javax.swing.BorderFactory.createTitledBorder("Properties"));

		allPropertiesBox.setText("All Properties");
		allPropertiesBox.setFocusable(false);
		allPropertiesBox.setName("allPropertiesBox"); // NOI18N
		allPropertiesBox.setOpaque(false);
		allPropertiesBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				allPropertiesSwitch(evt);
			}
		});

		buttonGroup1.add(hideProperties);
		hideProperties.setText("Hide");
		hideProperties.setFocusable(false);
		hideProperties.setName("hideProperties"); // NOI18N
		hideProperties.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				hidingPropertiesMode(evt);
			}
		});

		buttonGroup1.add(showProperties);
		showProperties.setText("Show");
		showProperties.setFocusable(false);
		showProperties.setName("showProperties"); // NOI18N
		showProperties.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showingPropertiesMode(evt);
			}
		});

		propsSeparator.setName("propsSeparator"); // NOI18N

		jScrollPane1.setBorder(null);
		jScrollPane1.setName("jScrollPane1"); // NOI18N
		jScrollPane1.setOpaque(false);

		propertySelector.setBackground(greenColor);
		propertySelector.setName("propertySelector"); // NOI18N
		jScrollPane1.setViewportView(propertySelector);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addComponent(
																		allPropertiesBox)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		81,
																		Short.MAX_VALUE)
																.addComponent(
																		showProperties)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		hideProperties)
																.addContainerGap())
												.addGroup(
														javax.swing.GroupLayout.Alignment.TRAILING,
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.TRAILING)
																				.addComponent(
																						jScrollPane1,
																						javax.swing.GroupLayout.Alignment.LEADING,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						288,
																						Short.MAX_VALUE)
																				.addComponent(
																						propsSeparator,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						288,
																						Short.MAX_VALUE))
																.addGap(10, 10,
																		10)))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(hideProperties)
												.addComponent(showProperties)
												.addComponent(allPropertiesBox))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(propsSeparator,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										10,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										319, Short.MAX_VALUE).addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void hidingPropertiesMode(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_hidingPropertiesMode
		setShowingMode(false);
	}// GEN-LAST:event_hidingPropertiesMode

	private void showingPropertiesMode(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showingPropertiesMode
		setShowingMode(true);
	}// GEN-LAST:event_showingPropertiesMode

	private void allPropertiesSwitch(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_allPropertiesSwitch
		// TODO add your handling code here:
	}// GEN-LAST:event_allPropertiesSwitch

	// Variables declaration - do not modify//GEN-BEGIN:variables
	protected javax.swing.JCheckBox allPropertiesBox;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JToggleButton hideProperties;
	private javax.swing.JScrollPane jScrollPane1;

	public cz.muni.fi.fresneleditor.gui.mod.lens2.components.PropertySelector<PropertyVisibilityWrapper> propertySelector;
	private javax.swing.JSeparator propsSeparator;
	private javax.swing.JToggleButton showProperties;

	// End of variables declaration//GEN-END:variables

	public void setShowingMode(boolean mode) {
		if (mode == currentShowMode)
			return;

		if (mode) {
			propertySelector.setBackground(greenColor);
			if (showPropsModel == null) {
				showPropsModel = new CheckBoxListSelectionModel();
			}
			propertySelector.setCheckBoxListSelectionModel(showPropsModel);
			buttonGroup1.setSelected(showProperties.getModel(), true);
		} else {
			propertySelector.setBackground(redColor);
			if (hidePropsModel == null) {
				hidePropsModel = new CheckBoxListSelectionModel();
			}
			propertySelector.setCheckBoxListSelectionModel(hidePropsModel);
			buttonGroup1.setSelected(hideProperties.getModel(), true);
		}

		currentShowMode = mode;

	}

	public void setHideProperties(List<PropertyVisibilityWrapper> props) {
		if (hidePropsModel == null)
			hidePropsModel = new CheckBoxListSelectionModel();

		DefaultListModel model = (DefaultListModel) propertySelector.getModel();
		for (int i = 0; i < model.size(); i++) {
			if (props.contains(model.getElementAt(i)))
				hidePropsModel.addSelectionInterval(i, i);
		}

		// propertySelector.setCheckBoxListSelectionModel(hidePropsModel);

	}

	public List<PropertyVisibilityWrapper> getHideProperties() {
		if (hidePropsModel.getModel() == null)
			return null;
		List<PropertyVisibilityWrapper> list = Lists.newArrayList();
		for (int i = hidePropsModel.getMinSelectionIndex(); i <= hidePropsModel
				.getMaxSelectionIndex(); i++) {
			if (hidePropsModel.isSelectedIndex(i))
				list.add((PropertyVisibilityWrapper) ((DefaultListModel) hidePropsModel
						.getModel()).getElementAt(i));
		}
		return list;
	}

	public void setShowProperties(List<PropertyVisibilityWrapper> props) {
		if (showPropsModel == null) {
			showPropsModel = new CheckBoxListSelectionModel();
		}
		if (props.contains(PropertyVisibilityWrapper.ALL_PROPERTIES)) {
			allPropertiesBox.setSelected(true);
		} else {
			allPropertiesBox.setSelected(false);
		}
		Object[] model = ((DefaultListModel) propertySelector.getModel())
				.toArray();
		List<PropertyVisibilityWrapper> lst = Arrays.asList(Arrays.copyOf(
				model, model.length, PropertyVisibilityWrapper[].class));
		for (PropertyVisibilityWrapper p : props) {
			if (!lst.contains(p)) {
				((DefaultListModel) propertySelector.getModel()).addElement(p);
			}
		}

		propertySelector.setElements(props);
		//
		// DefaultListModel lst = (DefaultListModel)
		// propertySelector.getModel();
		// for(int i = 0; i<lst.size();i++){
		// if(lstlst.get(i);
		// }
		//
		// showPropsModel.
	}

}
