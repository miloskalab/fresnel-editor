/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OrderPropertiesPanel.java
 *
 * Created on 24.5.2010, 19:48:01
 */

package cz.muni.fi.fresneleditor.gui.mod.lens2.components;

import cz.muni.fi.fresneleditor.gui.mod.lens2.PropertyVisibilityWrapper;

import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Arrays;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 * 
 * @author namornik
 */
public class OrderPropertiesPanel extends javax.swing.JPanel {

	/** Creates new form OrderPropertiesPanel */
	public OrderPropertiesPanel() {
		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		editButton = new javax.swing.JButton();
		showPropertyUpBtn = new javax.swing.JButton();
		showPropertyDownBtn = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		propertyVisibilityJList1 = new cz.muni.fi.fresneleditor.gui.mod.lens2.components.PropertyVisibilityJList();

		setBackground(new java.awt.Color(213, 255, 213));
		setBorder(javax.swing.BorderFactory
				.createTitledBorder("Properties order"));

		editButton.setText("Edit...");
		editButton.setEnabled(false);
		editButton.setFocusable(false);
		editButton.setName("editButton"); // NOI18N

		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application
				.getInstance().getContext()
				.getResourceMap(OrderPropertiesPanel.class);
		showPropertyUpBtn
				.setIcon(resourceMap.getIcon("showPropertyUpBtn.icon")); // NOI18N
		showPropertyUpBtn.setEnabled(false);
		showPropertyUpBtn.setFocusable(false);
		showPropertyUpBtn.setName("showPropertyUpBtn"); // NOI18N
		showPropertyUpBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						movePropertyUp(evt);
					}
				});

		showPropertyDownBtn.setIcon(resourceMap
				.getIcon("showPropertyDownBtn.icon")); // NOI18N
		showPropertyDownBtn.setEnabled(false);
		showPropertyDownBtn.setFocusable(false);
		showPropertyDownBtn.setName("showPropertyDownBtn"); // NOI18N
		showPropertyDownBtn
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						movePropertyDown(evt);
					}
				});

		jScrollPane1.setName("jScrollPane1"); // NOI18N

		propertyVisibilityJList1.setName("propertyVisibilityJList1"); // NOI18N
		propertyVisibilityJList1
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						propertyVisibilityJList1ValueChanged(evt);
					}
				});
		jScrollPane1.setViewportView(propertyVisibilityJList1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														168, Short.MAX_VALUE)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		editButton)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		13,
																		Short.MAX_VALUE)
																.addComponent(
																		showPropertyUpBtn)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		showPropertyDownBtn)))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														editButton,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														showPropertyUpBtn,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														showPropertyDownBtn,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										197, Short.MAX_VALUE).addContainerGap()));
	}// </editor-fold>//GEN-END:initComponents

	private void movePropertyUp(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_movePropertyUp
		showPropertyUpButtonClicked();
	}// GEN-LAST:event_movePropertyUp

	private void movePropertyDown(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_movePropertyDown
		showPropertyDownButtonClicked();
	}// GEN-LAST:event_movePropertyDown

	private void propertyVisibilityJList1ValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_propertyVisibilityJList1ValueChanged
		showPropertiesListClicked();
	}// GEN-LAST:event_propertyVisibilityJList1ValueChanged

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton editButton;
	private javax.swing.JScrollPane jScrollPane1;
	protected cz.muni.fi.fresneleditor.gui.mod.lens2.components.PropertyVisibilityJList propertyVisibilityJList1;
	private javax.swing.JButton showPropertyDownBtn;
	private javax.swing.JButton showPropertyUpBtn;

	// End of variables declaration//GEN-END:variables

	public void setShowProperties(List<PropertyVisibilityWrapper> lst) {
		propertyVisibilityJList1.removeAllElements();
		propertyVisibilityJList1.addElements(lst);
	}

	public void useAllProperties(boolean all) {
		if (all) {
			propertyVisibilityJList1
					.addElement(PropertyVisibilityWrapper.ALL_PROPERTIES);
		} else {
			propertyVisibilityJList1
					.removeElement(PropertyVisibilityWrapper.ALL_PROPERTIES);
		}
	}

	public List<PropertyVisibilityWrapper> getShowProperties() {
		Object[] tmpArr = ((DefaultListModel) propertyVisibilityJList1
				.getModel()).toArray();
		return Arrays.asList(Arrays.copyOf(tmpArr, tmpArr.length,
				PropertyVisibilityWrapper[].class));
	}

	private void showPropertiesListClicked() {
		boolean hasSelection = !propertyVisibilityJList1.isSelectionEmpty();
		// removeShowPropertyBtn.setEnabled(hasSelection);
		editButton.setEnabled(hasSelection);

		showPropertyDownBtn
				.setEnabled(hasSelection
						&& propertyVisibilityJList1.getSelectedIndex() < propertyVisibilityJList1
								.getModel().getSize() - 1);

		showPropertyUpBtn.setEnabled(hasSelection
				&& propertyVisibilityJList1.getSelectedIndex() > 0);
	}

	public PropertyVisibilityWrapper getSelectedValueCasted() {
		return propertyVisibilityJList1.getSelectedValueCasted();
	}

	public List<PropertyVisibilityWrapper> getElements() {
		return propertyVisibilityJList1.getElements();
	}

	public void setElements(List<PropertyVisibilityWrapper> elements) {
		propertyVisibilityJList1.setElements(elements);
	}

	public void setEditButtonActionlistener(ActionListener lst) {
		editButton.addActionListener(lst);
	}

	private void showPropertyDownButtonClicked() {
		moveSelectedElement(propertyVisibilityJList1, false);
	}

	private void showPropertyUpButtonClicked() {
		moveSelectedElement(propertyVisibilityJList1, true);
	}

	private void moveSelectedElement(JList list, boolean moveUp) {
		int index = list.getSelectedIndex();
		if ((moveUp && index >= 1)
				|| (!moveUp && (index + 1) < list.getModel().getSize())) {
			int targetIndex = index + (moveUp ? -1 : 1);
			// we don't do anything for first and last item
			Object selected = list.getModel().getElementAt(index);
			// boolean wasChecked = false;
			// if(list instanceof CheckBoxList){ //assuming only one item can be
			// selected
			// int [] checkedIndices =
			// ((CheckBoxList)list).getCheckBoxListSelectedIndices();
			// for(int i : checkedIndices){
			// if(i==index){
			// wasChecked = true;
			// }
			// }
			// }
			DefaultListModel model = (DefaultListModel) list.getModel();
			model.removeElementAt(index);
			model.insertElementAt(selected, targetIndex);

			// if(wasChecked){
			// int checkedCount =
			// ((CheckBoxList)list).getCheckBoxListSelectedIndices().length;
			// int [] newIndices =
			// Arrays.copyOf(((CheckBoxList)list).getCheckBoxListSelectedIndices(),
			// checkedCount + 1);
			// newIndices[checkedCount] = targetIndex;
			// ((CheckBoxList)list).setCheckBoxListSelectedIndices(newIndices);
			// }

			// refresh the selection
			list.setSelectedIndex(targetIndex);
		}
	}

	class OrderItemsAdapter extends MouseAdapter {

		private JList list;
		private int mouseDown = 0;
		private int mouseUp = 0;

		public OrderItemsAdapter(JList list) {
			propertyVisibilityJList1.addMouseListener(this);
			propertyVisibilityJList1.addMouseMotionListener(this);
			this.list = list;
		}

		@Override
		public void mouseDragged(MouseEvent e) {
			mouseReleased(e);
			mouseDown = mouseUp;
		}

		@Override
		public void mousePressed(MouseEvent e) {
			mouseDown = list.locationToIndex(e.getPoint());
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			mouseUp = list.locationToIndex(e.getPoint());
			if (mouseUp != mouseDown && mouseUp != -1) {
				DefaultListModel model = (DefaultListModel) list.getModel();
				Object obj = model.elementAt(mouseDown);
				model.removeElementAt(mouseDown);
				model.insertElementAt(obj, mouseUp);
			}
		}

	}

}
